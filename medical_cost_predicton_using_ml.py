# -*- coding: utf-8 -*-
"""Medical Cost Predicton using ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rMFNCMDs2SFOnelb9tTXSd6GPCz1qQOT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import metrics

# loading the data from csv file to a Pandas DataFrame
insurance_dataset = pd.read_csv('/content/insurance.csv')

# first 5 rows of the dataframe
insurance_dataset.head()

# number of rows and columns
insurance_dataset.shape

# getting some informations about the dataset
insurance_dataset.info()

# checking for missing values
insurance_dataset.isnull().sum()

# statistical Measures of the dataset
insurance_dataset.describe()

# distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

# Gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex', data=insurance_dataset)
plt.title('Sex Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

# bmi distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('BMI Distribution')
plt.show()

# children column
plt.figure(figsize=(6,6))
sns.countplot(x='children', data=insurance_dataset)
plt.title('Children')
plt.show()

insurance_dataset['children'].value_counts()

# smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=insurance_dataset)
plt.title('smoker')
plt.show()

insurance_dataset['smoker'].value_counts()

# region column
plt.figure(figsize=(6,6))
sns.countplot(x='region', data=insurance_dataset)
plt.title('region')
plt.show()

insurance_dataset['region'].value_counts()

# distribution of charges value
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges Distribution')
plt.show()

# encoding sex column
insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

 # encoding 'smoker' column
insurance_dataset.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# encoding 'region' column
insurance_dataset.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

X = insurance_dataset.drop(columns='charges', axis=1)
Y = insurance_dataset['charges']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(Y.shape, Y_train.shape, Y_test.shape)

from sklearn.linear_model import LinearRegression
linear=LinearRegression()
linear.fit(X_train,Y_train)
predict=linear.predict(X_test)

from sklearn.metrics import r2_score
lr=r2_score(Y_test,predict)*100
print(lr)

from sklearn.tree import DecisionTreeRegressor
decision=DecisionTreeRegressor()
decision.fit(X_train,Y_train)
pred=decision.predict(X_test)

from sklearn.metrics import r2_score
lr2=r2_score(Y_test,pred)*100
print(lr2)

from sklearn.ensemble import RandomForestRegressor
random=RandomForestRegressor(n_estimators=50)
random.fit(X_train,Y_train)
predict2=random.predict(X_test)

from sklearn.metrics import r2_score
lr3=r2_score(Y_test,predict2)*100
print(lr3)

print('linear regression',lr)
print('decision tree',lr2)
print('random forest regressor',lr3)

def prediction():
  age=int(input("Enter the age: "))
  sex=int(input("Enter the sex  (0:male, 1:female): "))
  bmi=float(input("Enter the body mass index: "))
  children=int(input("Enter the number of children: "))
  smoker=int(input("Enter whelther he/she is a smoker (yes:0, no:1): "))
  region=int(input("Enter the region (0:SE, 1:SW, 2:NE, 3:NW): "))
  
  input_data = (age,sex,bmi,children,smoker,region)
  # changing input_data to a numpy array
  input_data_as_numpy_array = np.asarray(input_data)
  # reshape the array
  input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
  price= random.predict(input_data_reshaped)
  if (sex>1):
    print("The entered data is not valid")
  elif (smoker>1):
    print("The entered data is not valid")
  elif (region>3):
    print("The entered data is not valid")
  else:
    print('The insurance cost is USD ', price[0])
price=prediction()
